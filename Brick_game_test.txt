#include "ofApp.h"
#define BALLSIZE 30
#define BRICKNO 32
#define BRICKLINE 5
#define BRICKW 64
#define BRICKH 40
#define RACQUETPOS 30

int life = 3;
int score = 0;
int xPos, yPos;
int xDir, yDir;
int padX, padWidth;
int ballSpeed = 10;
int bricks[BRICKLINE][BRICKNO];


//시작, 플레이, 정지
int start = 1;
int play = 0;
int finish = 0;


struct bulletType {

	int x;

	int y;

	int visible;

};



struct bulletType bullet[100];



void initBullet();

void updateBullet();

void addBullet(int x, int y);
void drawBullet();

//--------------------------------------------------------------
void ofApp::setup(){
	
		int i, j;

		ofSetWindowTitle("Brick Break Out Game");
		ofSetWindowShape(1024, 768);
		ofSetFrameRate(40);
		

		ofSetLineWidth(1);
		ofFill();

		xPos = ofGetWidth() / 2;
		yPos = ofGetHeight() / 2;
		xDir = yDir = ballSpeed;
		padX = 30;
		padWidth = 200;

		for (j = 0; j < BRICKLINE; j++) {
			for (i = 0; i < BRICKNO; i++) {
				bricks[j][i] = rand() % 2 + 1;
			}
		}
		
		initBullet();
	
}

//--------------------------------------------------------------
void ofApp::update() {
	if (start == 1) {
		ofBackground(ofColor::white);
	}
	if (finish == 1) {
		ofBackground(ofColor::black);
	}
	if (play == 1) {
		ofBackground(ofColor::forestGreen);
		xPos += xDir;
		yPos += yDir;

		padX = ofGetMouseX();

		if (yPos < BRICKH*BRICKLINE + BALLSIZE) {
			if (bricks[yPos / BRICKH][xPos / BRICKW] == 1) {
				bricks[yPos / BRICKH][xPos / BRICKW] = 0;
				score += 1;
				yDir *= -1;
			}

			if (bricks[yPos / BRICKH][xPos / BRICKW] == 2) {
				bricks[yPos / BRICKH][xPos / BRICKW] = 1;
				yDir *= -1;
			}
		}

		if (xPos< BALLSIZE || xPos > ofGetWidth() - BALLSIZE) {
			xDir *= -1;
		}

		if (yPos<BALLSIZE || yPos > ofGetHeight() - RACQUETPOS - BALLSIZE) {
			if (xPos >= padX && xPos <= padX + padWidth) {
				yDir *= -1;
			}
		}
		if (yPos < 0) {
			yDir *= -1;
		}

		if (yPos > 768) {
			life -= 1;
			yPos = ofGetHeight()/2;
		}
		if (life == 0) {
			play = 0;
			finish = 1;
		}
		updateBullet();
	}
}

//--------------------------------------------------------------
void ofApp::draw() {

	if (start == 1) {
		ofSetColor(ofColor::black);
		ofDrawBitmapString("Press k to Start", 500, 300);
	}
	if (finish == 1) {
		ofSetColor(ofColor::white);
		ofDrawBitmapString("Game Over", 500, 300);
	}
	if (play == 1) {
		int i, j;

		for (j = 0; j < BRICKLINE; j++) {
			for (i = 0; i < BRICKNO; i++) {
				if (bricks[j][i] == 2) {
					ofSetColor(ofColor::red);
				}
				else if (bricks[j][i] == 1) {
					ofSetColor(ofColor::yellow);
				}
				else if (bricks[j][i] == 0) {
					ofSetColor(ofColor::forestGreen);
				}
				ofRect(i*BRICKW, j*BRICKH, BRICKW-5, BRICKH-5);
			}
		}
		ofSetColor(ofColor::white);
		ofCircle(xPos, yPos, BALLSIZE);

		ofLine(padX, ofGetHeight() - RACQUETPOS, padX + padWidth, ofGetHeight() - RACQUETPOS);

		string SCORE = "Score: " + ofToString(score, 1);
		ofDrawBitmapString(SCORE, 100, 750);

		string LIFE = "Life: " + ofToString(life, 1);
		ofDrawBitmapString(LIFE, 800, 750);

		drawBullet();
	}
}

//--------------------------------------------------------------
void ofApp::keyPressed(int key){
	if (key == 'k') {
		start = 0;
		play = 1;
	}
	if (key == 'd') {
		addBullet(padX + padWidth / 2, ofGetHeight() - RACQUETPOS);
	}
}

//--------------------------------------------------------------
void ofApp::keyReleased(int key){

}

//--------------------------------------------------------------
void ofApp::mouseMoved(int x, int y ){

}

//--------------------------------------------------------------
void ofApp::mouseDragged(int x, int y, int button){

}

//--------------------------------------------------------------
void ofApp::mousePressed(int x, int y, int button) {
	
}

//--------------------------------------------------------------
void ofApp::mouseReleased(int x, int y, int button){

}

//--------------------------------------------------------------
void ofApp::mouseEntered(int x, int y){

}

//--------------------------------------------------------------
void ofApp::mouseExited(int x, int y){

}

//--------------------------------------------------------------
void ofApp::windowResized(int w, int h){

}

//--------------------------------------------------------------
void ofApp::gotMessage(ofMessage msg){

}

//--------------------------------------------------------------
void ofApp::dragEvent(ofDragInfo dragInfo){ 

}

void initBullet() {
	int i;
	for (i = 0; i<100; i++) {

		bullet[i].x = 0;

		bullet[i].y = 0;

		bullet[i].visible = 0;

	}
}
// 총알의 좌표 변경 및 벽이나 벽돌과의 충돌 감지
void updateBullet() {
	int i, x, y;
	
	for (i = 0; i<100; i++) {

	if (bullet[i].visible == 1) {
		bullet[i].y -= 10;

		x = bullet[i].x;
		y = bullet[i].y;
	if (bricks[y / BRICKH][x / BRICKW] == 1) {
		bricks[y / BRICKH][x / BRICKW] = 0;
		score += 1;
		bullet[i].visible = 0;
		}
	if (bricks[y / BRICKH][x / BRICKW] == 2) {
		bricks[y / BRICKH][x / BRICKW] = 1;
		bullet[i].visible = 0;
		}
	if (bullet[i].y < 0) {
		bullet[i].visible = 0;
		}
	}
 }
}



// 키보드가 눌리면 총알 발사

void addBullet(int x, int y) {
	int i;
	for (i = 0; i<100; i++) { // 모든 총알에 대하여…

		if (bullet[i].visible == 0) {

			bullet[i].x = x;

			bullet[i].y = y;

			bullet[i].visible = 1;

			break;

		}

	}

}
// 모든 총알 중에서 활성화된 총알을 그린다.
void drawBullet() {
	int i;
	for (i = 0; i<100; i++) {

		if (bullet[i].visible) {
			ofSetColor(ofColor::white);
			ofCircle(bullet[i].x, bullet[i].y, 3);
		}
	}
	
}